--
-- VHDL Architecture Board.SPI_IO_Tristate.struct
--
-- Created:
--          by - student.UNKNOWN (DESKTOP-3I0F3HP)
--          at - 16:04:14 02.08.2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
LIBRARY gates;
USE gates.gates.all;

LIBRARY IO;

ARCHITECTURE struct OF SPI_IO_Tristate IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL OE   : std_ulogic;
   SIGNAL in1  : std_uLogic;
   SIGNAL in2  : std_uLogic;
   SIGNAL out1 : std_uLogic;
   SIGNAL out2 : std_uLogic;
   SIGNAL out3 : std_uLogic;


   -- Component Declarations
   COMPONENT and2
   GENERIC (
      delay : time := gateDelay
   );
   PORT (
      in1  : IN     std_uLogic ;
      in2  : IN     std_uLogic ;
      out1 : OUT    std_uLogic 
   );
   END COMPONENT;
   COMPONENT and4inv4
   GENERIC (
      delay : time := gateDelay
   );
   PORT (
      in1  : IN     std_uLogic ;
      in2  : IN     std_uLogic ;
      in3  : IN     std_uLogic ;
      in4  : IN     std_uLogic ;
      out1 : OUT    std_uLogic 
   );
   END COMPONENT;
   COMPONENT inverter
   GENERIC (
      delay : time := gateDelay
   );
   PORT (
      in1  : IN     std_uLogic ;
      out1 : OUT    std_uLogic 
   );
   END COMPONENT;
   COMPONENT tristateBufferULogic
   GENERIC (
      delay : time := gateDelay
   );
   PORT (
      OE   : IN     std_ulogic ;
      in1  : IN     std_uLogic ;
      out1 : OUT    std_uLogic 
   );
   END COMPONENT;
   COMPONENT tristateBufferULogicVector
   GENERIC (
      dataNbBits : positive := 8;
      delay      : time     := gateDelay
   );
   PORT (
      OE   : IN     std_ulogic ;
      in1  : IN     std_uLogic_vector (dataNbBits-1 DOWNTO 0);
      out1 : OUT    std_Logic_vector (dataNbBits-1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : and2 USE ENTITY Gates.and2;
   FOR ALL : and4inv4 USE ENTITY Gates.and4inv4;
   FOR ALL : inverter USE ENTITY Gates.inverter;
   FOR ALL : tristateBufferULogic USE ENTITY IO.tristateBufferULogic;
   FOR ALL : tristateBufferULogicVector USE ENTITY IO.tristateBufferULogicVector;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_5 : and2
      GENERIC MAP (
         delay => gateDelay
      )
      PORT MAP (
         in1  => in1,
         in2  => in2,
         out1 => OE
      );
   U_3 : and4inv4
      GENERIC MAP (
         delay => gateDelay
      )
      PORT MAP (
         in1  => writeEnable_Risc(8),
         in2  => writeEnable_Risc(9),
         in3  => writeEnable_Risc(10),
         in4  => writeEnable_Risc(11),
         out1 => in1
      );
   U_4 : and4inv4
      GENERIC MAP (
         delay => gateDelay
      )
      PORT MAP (
         in1  => writeEnable_Risc(12),
         in2  => writeEnable_Risc(13),
         in3  => writeEnable_Risc(14),
         in4  => writeEnable_Risc(15),
         out1 => in2
      );
   U_0 : inverter
      GENERIC MAP (
         delay => gateDelay
      )
      PORT MAP (
         in1  => writeEnable_Risc(17),
         out1 => out1
      );
   U_1 : inverter
      GENERIC MAP (
         delay => gateDelay
      )
      PORT MAP (
         in1  => writeEnable_Risc(19),
         out1 => out2
      );
   U_2 : inverter
      GENERIC MAP (
         delay => gateDelay
      )
      PORT MAP (
         in1  => writeEnable_Risc(20),
         out1 => out3
      );
   I11 : tristateBufferULogic
      GENERIC MAP (
         delay => gateDelay
      )
      PORT MAP (
         OE   => out1,
         in1  => SPI_masterFull,
         out1 => masterFull
      );
   I13 : tristateBufferULogic
      GENERIC MAP (
         delay => gateDelay
      )
      PORT MAP (
         OE   => out2,
         in1  => SPI_slaveEmpty,
         out1 => slaveEmpty
      );
   I14 : tristateBufferULogic
      GENERIC MAP (
         delay => gateDelay
      )
      PORT MAP (
         OE   => out3,
         in1  => SPI_endTransfer,
         out1 => endTransfer
      );
   I12 : tristateBufferULogicVector
      GENERIC MAP (
         dataNbBits => DataBitNb,
         delay      => gateDelay
      )
      PORT MAP (
         OE   => OE,
         in1  => SPI_DataIn,
         out1 => DataIn
      );

END struct;
